
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '02B18A40EB8B332E99FCCFE6A045A8CC'
    
_lr_action_items = {'INTLITERAL':([56,76,78,80,82,84,86,88,100,103,104,105,107,108,112,113,114,116,125,129,],[-72,-72,-43,-72,-72,-72,96,-46,-72,-42,-58,-59,-68,-72,-60,-61,-45,-72,-43,-72,]),'RETURN':([11,12,13,23,24,32,49,52,54,58,59,61,63,67,68,73,74,81,89,109,110,117,119,120,121,132,133,134,136,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,56,-33,-29,-35,-32,-34,56,-30,-31,-36,-40,-72,-72,-38,56,56,-39,-71,-69,-66,-72,-62,56,]),'READ':([11,12,13,23,24,32,49,52,54,58,59,61,63,67,68,73,74,81,89,109,110,117,119,120,121,132,133,134,136,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,57,-33,-29,-35,-32,-34,57,-30,-31,-36,-40,-72,-72,-38,57,57,-39,-71,-69,-66,-72,-62,57,]),'VOID':([15,],[27,]),'STRINGLITERAL':([31,],[41,]),'WHILE':([11,12,13,23,24,32,49,52,54,58,59,61,63,67,68,73,74,81,89,109,110,117,119,120,121,132,133,134,136,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,60,-33,-29,-35,-32,-34,60,-30,-31,-36,-40,-72,-72,-38,60,60,-39,-71,-69,-66,-72,-62,60,]),'PROGRAM':([0,],[2,]),'MULTIPLY':([3,96,97,98,99,101,102,122,128,],[-2,-56,112,-48,-47,-57,-55,-54,-49,]),'MINUS':([3,87,96,97,98,99,101,102,122,128,],[-2,105,-56,-44,-48,-47,-57,-55,-54,-49,]),'STRING':([5,11,12,32,49,52,109,110,134,136,],[7,7,7,-9,-7,7,7,7,-66,7,]),'BEGIN':([3,4,48,],[-2,5,52,]),'RPAREN':([3,22,30,34,35,38,39,40,43,44,45,47,50,51,53,87,90,93,94,95,96,97,98,99,101,102,115,116,118,122,123,124,125,128,130,131,138,141,],[-2,-72,-72,-16,-14,-72,48,-18,-72,-19,-17,-21,-15,-72,-20,-41,106,109,110,111,-56,-44,-48,-47,-57,-55,122,-72,-67,-54,128,-72,-51,-49,-53,-50,-72,-52,]),'SEMICOLON':([3,21,22,34,35,41,42,43,50,64,77,87,91,96,97,98,99,101,102,106,111,122,128,],[-2,32,-72,-16,-14,-8,49,-72,-15,81,89,-41,-37,-56,-44,-48,-47,-57,-55,117,121,-54,-49,]),'COMMA':([3,22,38,43,44,51,87,96,97,98,99,101,102,122,124,128,138,],[-2,33,46,33,-19,46,-41,-56,-44,-48,-47,-57,-55,-54,129,-49,129,]),'PLUS':([3,87,96,97,98,99,101,102,122,128,],[-2,104,-56,-44,-48,-47,-57,-55,-54,-49,]),'IDENTIFIER':([2,7,8,9,10,11,12,13,23,24,26,27,28,32,33,37,49,52,54,56,58,59,61,63,67,68,73,74,76,78,79,80,81,82,84,85,86,88,89,100,103,104,105,107,108,109,110,112,113,114,116,117,119,120,121,125,129,132,133,134,136,139,140,],[3,3,-11,3,-10,-72,-72,-6,-5,-4,-12,-13,3,-9,3,3,-7,-72,3,-72,-33,-29,-35,-32,-34,3,-30,-31,-72,-43,3,-72,-36,-72,-72,3,3,-46,-40,-72,-42,-58,-59,-68,-72,-72,-72,-60,-61,-45,-72,-38,3,3,-39,-43,-72,-71,-69,-66,-72,-62,3,]),'ASSIGN':([3,20,62,],[-2,31,80,]),'$end':([1,25,],[0,-1,]),'FUNCTION':([5,6,11,12,13,16,23,24,32,49,75,],[-72,15,-72,-72,-6,15,-5,-4,-9,-7,-24,]),'END':([5,6,11,12,13,14,16,17,19,23,24,29,32,49,52,54,55,58,59,61,63,66,67,68,71,73,74,75,81,83,89,117,121,132,133,139,],[-72,-72,-72,-72,-6,25,-72,-3,-23,-5,-4,-22,-9,-7,-72,-72,75,-33,-29,-35,-32,-28,-34,-72,-26,-30,-31,-24,-36,-27,-40,-38,-39,-71,-69,-62,]),'DIVIDE':([3,96,97,98,99,101,102,122,128,],[-2,-56,113,-48,-47,-57,-55,-54,-49,]),'ELSE':([11,12,13,23,24,32,49,58,59,61,63,66,67,68,73,74,81,83,89,110,117,120,121,127,132,133,139,],[-72,-72,-6,-5,-4,-9,-7,-33,-29,-35,-32,-28,-34,-72,-30,-31,-36,-27,-40,-72,-38,-72,-39,134,-71,-69,-62,]),'WRITE':([11,12,13,23,24,32,49,52,54,58,59,61,63,67,68,73,74,81,89,109,110,117,119,120,121,132,133,134,136,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,72,-33,-29,-35,-32,-34,72,-30,-31,-36,-40,-72,-72,-38,72,72,-39,-71,-69,-66,-72,-62,72,]),'LPAREN':([3,18,36,56,57,60,65,69,70,72,76,78,80,82,84,86,88,100,102,103,104,105,107,108,112,113,114,116,125,129,],[-2,30,-25,-72,79,-70,82,84,-63,85,-72,-43,-72,-72,-72,100,-46,-72,116,-42,-58,-59,-68,-72,-60,-61,-45,-72,-43,-72,]),'ENDIF':([11,12,13,23,24,32,49,58,59,61,63,66,67,68,73,74,81,83,89,110,117,120,121,127,132,133,134,135,136,137,139,140,142,],[-72,-72,-6,-5,-4,-9,-7,-33,-29,-35,-32,-28,-34,-72,-30,-31,-36,-27,-40,-72,-38,-72,-39,-72,-71,-69,-66,139,-72,-65,-62,-72,-64,]),'IF':([11,12,13,23,24,32,49,52,54,58,59,61,63,67,68,73,74,81,89,109,110,117,119,120,121,132,133,134,136,139,140,],[-72,-72,-6,-5,-4,-9,-7,-72,70,-33,-29,-35,-32,-34,70,-30,-31,-36,-40,-72,-72,-38,70,70,-39,-71,-69,-66,-72,-62,70,]),'ENDWHILE':([11,12,13,23,24,32,49,58,59,61,63,66,67,68,73,74,81,83,89,109,117,119,121,126,132,133,139,],[-72,-72,-6,-5,-4,-9,-7,-33,-29,-35,-32,-28,-34,-72,-30,-31,-36,-27,-40,-72,-38,-72,-39,132,-71,-69,-62,]),'INT':([5,11,12,15,30,32,46,49,52,109,110,134,136,],[8,8,8,8,8,-9,8,-7,8,8,8,-66,8,]),'FLOAT':([5,11,12,15,30,32,46,49,52,109,110,134,136,],[10,10,10,10,10,-9,10,-7,10,10,10,-66,10,]),'COMPOP':([3,87,92,96,97,98,99,101,102,122,128,],[-2,-41,107,-56,-44,-48,-47,-57,-55,-54,-49,]),'FLOATLITERAL':([56,76,78,80,82,84,86,88,100,103,104,105,107,108,112,113,114,116,125,129,],[-72,-72,-43,-72,-72,-72,101,-46,-72,-42,-58,-59,-68,-72,-60,-61,-45,-72,-43,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([5,11,12,52,109,110,136,],[6,23,24,54,119,120,140,]),'var_type':([5,11,12,15,30,46,52,109,110,136,],[9,9,9,26,37,37,9,9,9,9,]),'expr_list':([116,],[123,]),'param_decl_list':([30,],[39,]),'read_stmt':([54,68,119,120,140,],[58,58,58,58,58,]),'primary':([86,],[99,]),'start_else':([127,],[136,]),'id_tail':([22,43,],[35,50,]),'id_list':([9,79,85,],[21,90,95,]),'return_stmt':([54,68,119,120,140,],[61,61,61,61,61,]),'string_decl':([5,11,12,52,109,110,136,],[12,12,12,12,12,12,12,]),'expr_list_tail':([124,138,],[131,141,]),'id':([2,7,9,28,33,37,54,68,79,85,86,119,120,140,],[4,20,22,36,43,44,62,62,22,22,102,62,62,62,]),'postfix_expr':([86,],[97,]),'start_of_func':([6,16,],[18,18,]),'factor_prefix':([76,],[86,]),'compop':([92,],[108,]),'assign_stmt':([54,68,119,120,140,],[63,63,63,63,63,]),'param_decl_tail':([38,51,],[45,53,]),'program':([0,],[1,]),'assign_expr':([54,68,119,120,140,],[64,64,64,64,64,]),'factor':([76,],[87,]),'start_while':([54,68,119,120,140,],[65,65,65,65,65,]),'empty':([5,6,11,12,16,22,30,38,43,51,52,54,56,68,76,80,82,84,100,108,109,110,116,119,120,124,127,129,136,138,140,],[13,19,13,13,19,34,40,47,34,47,13,66,78,66,88,78,78,78,78,78,13,13,125,66,66,130,137,78,13,130,66,]),'write_stmt':([54,68,119,120,140,],[67,67,67,67,67,]),'addop':([87,],[103,]),'func_decl':([6,16,],[16,16,]),'mulop':([97,],[114,]),'call_expr':([86,],[98,]),'stmt':([54,68,119,120,140,],[68,68,68,68,68,]),'func_declarations':([6,16,],[17,29,]),'else_part':([127,],[135,]),'any_type':([15,],[28,]),'end_while':([126,],[133,]),'param_decl':([30,46,],[38,51,]),'pgm_body':([5,],[14,]),'stmt_list':([54,68,119,120,140,],[71,83,126,127,142,]),'start_if':([54,68,119,120,140,],[69,69,69,69,69,]),'if_stmt':([54,68,119,120,140,],[73,73,73,73,73,]),'base_stmt':([54,68,119,120,140,],[59,59,59,59,59,]),'func_body':([52,],[55,]),'expr':([56,80,82,84,100,108,116,129,],[77,91,92,92,115,118,124,138,]),'expr_prefix':([56,80,82,84,100,108,116,129,],[76,76,76,76,76,76,76,76,]),'var_decl':([5,11,12,52,109,110,136,],[11,11,11,11,11,11,11,]),'while_stmt':([54,68,119,120,140,],[74,74,74,74,74,]),'str':([31,],[42,]),'cond':([82,84,],[93,94,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM id BEGIN pgm_body END','program',5,'p_program','LITTLEGram.py',123),
  ('id -> IDENTIFIER','id',1,'p_id','LITTLEGram.py',126),
  ('pgm_body -> decl func_declarations','pgm_body',2,'p_program_body','LITTLEGram.py',130),
  ('decl -> string_decl decl','decl',2,'p_decl','LITTLEGram.py',133),
  ('decl -> var_decl decl','decl',2,'p_decl','LITTLEGram.py',134),
  ('decl -> empty','decl',1,'p_decl','LITTLEGram.py',135),
  ('string_decl -> STRING id ASSIGN str SEMICOLON','string_decl',5,'p_string_decl','LITTLEGram.py',140),
  ('str -> STRINGLITERAL','str',1,'p_str','LITTLEGram.py',145),
  ('var_decl -> var_type id_list SEMICOLON','var_decl',3,'p_var_decl','LITTLEGram.py',151),
  ('var_type -> FLOAT','var_type',1,'p_var_type','LITTLEGram.py',156),
  ('var_type -> INT','var_type',1,'p_var_type','LITTLEGram.py',157),
  ('any_type -> var_type','any_type',1,'p_any_type','LITTLEGram.py',162),
  ('any_type -> VOID','any_type',1,'p_any_type','LITTLEGram.py',163),
  ('id_list -> id id_tail','id_list',2,'p_id_list','LITTLEGram.py',166),
  ('id_tail -> COMMA id id_tail','id_tail',3,'p_id_tail','LITTLEGram.py',170),
  ('id_tail -> empty','id_tail',1,'p_id_tail','LITTLEGram.py',171),
  ('param_decl_list -> param_decl param_decl_tail','param_decl_list',2,'p_param_decl_list','LITTLEGram.py',180),
  ('param_decl_list -> empty','param_decl_list',1,'p_param_decl_list','LITTLEGram.py',181),
  ('param_decl -> var_type id','param_decl',2,'p_param_decl','LITTLEGram.py',184),
  ('param_decl_tail -> COMMA param_decl param_decl_tail','param_decl_tail',3,'p_param_decl_tail','LITTLEGram.py',188),
  ('param_decl_tail -> empty','param_decl_tail',1,'p_param_decl_tail','LITTLEGram.py',189),
  ('func_declarations -> func_decl func_declarations','func_declarations',2,'p_func_declarations','LITTLEGram.py',194),
  ('func_declarations -> empty','func_declarations',1,'p_func_declarations','LITTLEGram.py',195),
  ('func_decl -> start_of_func LPAREN param_decl_list RPAREN BEGIN func_body END','func_decl',7,'p_func_decl','LITTLEGram.py',198),
  ('start_of_func -> FUNCTION any_type id','start_of_func',3,'p_start_of_func','LITTLEGram.py',202),
  ('func_body -> decl stmt_list','func_body',2,'p_func_body','LITTLEGram.py',206),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','LITTLEGram.py',211),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','LITTLEGram.py',212),
  ('stmt -> base_stmt','stmt',1,'p_stmt','LITTLEGram.py',215),
  ('stmt -> if_stmt','stmt',1,'p_stmt','LITTLEGram.py',216),
  ('stmt -> while_stmt','stmt',1,'p_stmt','LITTLEGram.py',217),
  ('base_stmt -> assign_stmt','base_stmt',1,'p_base_stmt','LITTLEGram.py',220),
  ('base_stmt -> read_stmt','base_stmt',1,'p_base_stmt','LITTLEGram.py',221),
  ('base_stmt -> write_stmt','base_stmt',1,'p_base_stmt','LITTLEGram.py',222),
  ('base_stmt -> return_stmt','base_stmt',1,'p_base_stmt','LITTLEGram.py',223),
  ('assign_stmt -> assign_expr SEMICOLON','assign_stmt',2,'p_assign_stmt','LITTLEGram.py',228),
  ('assign_expr -> id ASSIGN expr','assign_expr',3,'p_assign_expr','LITTLEGram.py',231),
  ('read_stmt -> READ LPAREN id_list RPAREN SEMICOLON','read_stmt',5,'p_read_stmt','LITTLEGram.py',234),
  ('write_stmt -> WRITE LPAREN id_list RPAREN SEMICOLON','write_stmt',5,'p_write_stmt','LITTLEGram.py',237),
  ('return_stmt -> RETURN expr SEMICOLON','return_stmt',3,'p_return_stmt','LITTLEGram.py',240),
  ('expr -> expr_prefix factor','expr',2,'p_expr','LITTLEGram.py',245),
  ('expr_prefix -> expr_prefix factor addop','expr_prefix',3,'p_expr_prefix','LITTLEGram.py',248),
  ('expr_prefix -> empty','expr_prefix',1,'p_expr_prefix','LITTLEGram.py',249),
  ('factor -> factor_prefix postfix_expr','factor',2,'p_factor','LITTLEGram.py',252),
  ('factor_prefix -> factor_prefix postfix_expr mulop','factor_prefix',3,'p_factor_prefix','LITTLEGram.py',255),
  ('factor_prefix -> empty','factor_prefix',1,'p_factor_prefix','LITTLEGram.py',256),
  ('postfix_expr -> primary','postfix_expr',1,'p_postfix_expr','LITTLEGram.py',259),
  ('postfix_expr -> call_expr','postfix_expr',1,'p_postfix_expr','LITTLEGram.py',260),
  ('call_expr -> id LPAREN expr_list RPAREN','call_expr',4,'p_call_expr','LITTLEGram.py',263),
  ('expr_list -> expr expr_list_tail','expr_list',2,'p_expr_list','LITTLEGram.py',266),
  ('expr_list -> empty','expr_list',1,'p_expr_list','LITTLEGram.py',267),
  ('expr_list_tail -> COMMA expr expr_list_tail','expr_list_tail',3,'p_expr_list_tail','LITTLEGram.py',270),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expr_list_tail','LITTLEGram.py',271),
  ('primary -> LPAREN expr RPAREN','primary',3,'p_primary','LITTLEGram.py',274),
  ('primary -> id','primary',1,'p_primary','LITTLEGram.py',275),
  ('primary -> INTLITERAL','primary',1,'p_primary','LITTLEGram.py',276),
  ('primary -> FLOATLITERAL','primary',1,'p_primary','LITTLEGram.py',277),
  ('addop -> PLUS','addop',1,'p_addop','LITTLEGram.py',280),
  ('addop -> MINUS','addop',1,'p_addop','LITTLEGram.py',281),
  ('mulop -> MULTIPLY','mulop',1,'p_mulop','LITTLEGram.py',284),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','LITTLEGram.py',285),
  ('if_stmt -> start_if LPAREN cond RPAREN decl stmt_list else_part ENDIF','if_stmt',8,'p_if_stmt','LITTLEGram.py',290),
  ('start_if -> IF','start_if',1,'p_start_if','LITTLEGram.py',294),
  ('else_part -> start_else decl stmt_list','else_part',3,'p_else_part','LITTLEGram.py',298),
  ('else_part -> empty','else_part',1,'p_else_part','LITTLEGram.py',299),
  ('start_else -> ELSE','start_else',1,'p_start_else','LITTLEGram.py',304),
  ('cond -> expr compop expr','cond',3,'p_cond','LITTLEGram.py',308),
  ('compop -> COMPOP','compop',1,'p_compop','LITTLEGram.py',311),
  ('while_stmt -> start_while LPAREN cond RPAREN decl stmt_list end_while','while_stmt',7,'p_while_stmt','LITTLEGram.py',316),
  ('start_while -> WHILE','start_while',1,'p_start_while','LITTLEGram.py',319),
  ('end_while -> ENDWHILE','end_while',1,'p_end_while','LITTLEGram.py',323),
  ('empty -> <empty>','empty',0,'p_empty','LITTLEGram.py',327),
]
