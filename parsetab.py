
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '02B18A40EB8B332E99FCCFE6A045A8CC'
    
_lr_action_items = {'ELSE':([7,12,13,16,24,30,44,56,57,58,62,67,68,69,72,74,81,85,91,108,112,113,119,126,136,137,140,],[-72,-6,-72,-4,-5,-9,-7,-31,-32,-33,-35,-30,-29,-28,-34,-72,-36,-27,-40,-72,-38,-39,-72,133,-69,-71,-62,]),'MULTIPLY':([4,98,99,100,102,103,104,125,128,],[-2,115,-47,-55,-56,-48,-57,-54,-49,]),'END':([5,7,11,12,13,14,16,20,21,23,24,30,34,44,52,54,55,56,57,58,62,67,68,69,72,73,74,75,81,85,91,112,113,136,137,140,],[-72,-72,-72,-6,-72,25,-4,-72,-3,-23,-5,-9,-22,-7,-72,-72,75,-31,-32,-33,-35,-30,-29,-28,-34,-26,-72,-24,-36,-27,-40,-38,-39,-69,-71,-62,]),'RETURN':([7,12,13,16,24,30,44,52,54,56,57,58,62,67,68,72,74,81,91,108,111,112,113,119,121,132,133,136,137,139,140,],[-72,-6,-72,-4,-5,-9,-7,-72,63,-31,-32,-33,-35,-30,-29,-34,63,-36,-40,-72,-72,-38,-39,63,63,-72,-66,-69,-71,63,-62,]),'RPAREN':([4,17,28,29,35,38,40,42,43,45,47,48,49,51,53,86,87,90,93,95,98,99,100,102,103,104,117,118,120,122,123,124,125,128,130,131,138,141,],[-2,-72,-16,-14,-72,-72,-72,-18,50,-15,-17,-21,-19,-72,-20,96,97,-41,108,111,-44,-47,-55,-56,-48,-57,-72,125,-67,-51,128,-72,-54,-49,-50,-53,-72,-52,]),'READ':([7,12,13,16,24,30,44,52,54,56,57,58,62,67,68,72,74,81,91,108,111,112,113,119,121,132,133,136,137,139,140,],[-72,-6,-72,-4,-5,-9,-7,-72,59,-31,-32,-33,-35,-30,-29,-34,59,-36,-40,-72,-72,-38,-39,59,59,-72,-66,-69,-71,59,-62,]),'ENDIF':([7,12,13,16,24,30,44,56,57,58,62,67,68,69,72,74,81,85,91,108,112,113,119,126,132,133,134,135,136,137,139,140,142,],[-72,-6,-72,-4,-5,-9,-7,-31,-32,-33,-35,-30,-29,-28,-34,-72,-36,-27,-40,-72,-38,-39,-72,-72,-72,-66,-65,140,-69,-71,-72,-62,-64,]),'INT':([5,7,13,19,30,35,44,46,52,108,111,132,133,],[8,8,8,8,-9,8,-7,8,8,8,8,8,-66,]),'IDENTIFIER':([2,6,7,8,9,10,12,13,16,24,27,30,31,32,33,41,44,52,54,56,57,58,62,63,67,68,72,74,76,77,78,79,81,82,83,84,88,89,91,101,105,106,107,108,109,110,111,112,113,114,115,116,117,119,121,122,129,132,133,136,137,139,140,],[4,4,-72,-11,-10,4,-6,-72,-4,-5,4,-9,4,-13,-12,4,-7,-72,4,-31,-32,-33,-35,-72,-30,-29,-34,4,4,4,-72,-43,-36,-72,-72,-72,-46,4,-40,-72,-58,-42,-59,-72,-72,-68,-72,-38,-39,-45,-60,-61,-72,4,4,-43,-72,-72,-66,-69,-71,4,-62,]),'IF':([7,12,13,16,24,30,44,52,54,56,57,58,62,67,68,72,74,81,91,108,111,112,113,119,121,132,133,136,137,139,140,],[-72,-6,-72,-4,-5,-9,-7,-72,71,-31,-32,-33,-35,-30,-29,-34,71,-36,-40,-72,-72,-38,-39,71,71,-72,-66,-69,-71,71,-62,]),'MINUS':([4,90,98,99,100,102,103,104,125,128,],[-2,107,-44,-47,-55,-56,-48,-57,-54,-49,]),'COMPOP':([4,90,94,98,99,100,102,103,104,125,128,],[-2,-41,110,-44,-47,-55,-56,-48,-57,-54,-49,]),'INTLITERAL':([63,78,79,82,83,84,88,89,101,105,106,107,109,110,114,115,116,117,122,129,],[-72,-72,-43,-72,-72,-72,-46,102,-72,-58,-42,-59,-72,-68,-45,-60,-61,-72,-43,-72,]),'ENDWHILE':([7,12,13,16,24,30,44,56,57,58,62,67,68,69,72,74,81,85,91,111,112,113,121,127,136,137,140,],[-72,-6,-72,-4,-5,-9,-7,-31,-32,-33,-35,-30,-29,-28,-34,-72,-36,-27,-40,-72,-38,-39,-72,137,-69,-71,-62,]),'VOID':([19,],[32,]),'STRING':([5,7,13,30,44,52,108,111,132,133,],[6,6,6,-9,-7,6,6,6,6,-66,]),'WRITE':([7,12,13,16,24,30,44,52,54,56,57,58,62,67,68,72,74,81,91,108,111,112,113,119,121,132,133,136,137,139,140,],[-72,-6,-72,-4,-5,-9,-7,-72,61,-31,-32,-33,-35,-30,-29,-34,61,-36,-40,-72,-72,-38,-39,61,61,-72,-66,-69,-71,61,-62,]),'COMMA':([4,17,38,40,49,51,90,98,99,100,102,103,104,124,125,128,138,],[-2,27,27,46,-19,46,-41,-44,-47,-55,-56,-48,-57,129,-54,-49,129,]),'FUNCTION':([5,7,11,12,13,16,20,24,30,44,75,],[-72,-72,19,-6,-72,-4,19,-5,-9,-7,-24,]),'SEMICOLON':([4,17,18,28,29,36,37,38,45,64,80,90,92,96,97,98,99,100,102,103,104,125,128,],[-2,-72,30,-16,-14,-8,44,-72,-15,81,91,-41,-37,112,113,-44,-47,-55,-56,-48,-57,-54,-49,]),'BEGIN':([3,4,50,],[5,-2,52,]),'FLOAT':([5,7,13,19,30,35,44,46,52,108,111,132,133,],[9,9,9,9,-9,9,-7,9,9,9,9,9,-66,]),'$end':([1,25,],[0,-1,]),'STRINGLITERAL':([26,],[36,]),'DIVIDE':([4,98,99,100,102,103,104,125,128,],[-2,116,-47,-55,-56,-48,-57,-54,-49,]),'ASSIGN':([4,15,65,],[-2,26,82,]),'FLOATLITERAL':([63,78,79,82,83,84,88,89,101,105,106,107,109,110,114,115,116,117,122,129,],[-72,-72,-43,-72,-72,-72,-46,104,-72,-58,-42,-59,-72,-68,-45,-60,-61,-72,-43,-72,]),'LPAREN':([4,22,39,59,60,61,63,66,70,71,78,79,82,83,84,88,89,100,101,105,106,107,109,110,114,115,116,117,122,129,],[-2,35,-25,76,-70,77,-72,83,84,-63,-72,-43,-72,-72,-72,-46,101,117,-72,-58,-42,-59,-72,-68,-45,-60,-61,-72,-43,-72,]),'PLUS':([4,90,98,99,100,102,103,104,125,128,],[-2,105,-44,-47,-55,-56,-48,-57,-54,-49,]),'PROGRAM':([0,],[2,]),'WHILE':([7,12,13,16,24,30,44,52,54,56,57,58,62,67,68,72,74,81,91,108,111,112,113,119,121,132,133,136,137,139,140,],[-72,-6,-72,-4,-5,-9,-7,-72,60,-31,-32,-33,-35,-30,-29,-34,60,-36,-40,-72,-72,-38,-39,60,60,-72,-66,-69,-71,60,-62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'string_decl':([5,7,13,52,108,111,132,],[7,7,7,7,7,7,7,]),'expr_list':([117,],[123,]),'start_of_func':([11,20,],[22,22,]),'assign_stmt':([54,74,119,121,139,],[57,57,57,57,57,]),'cond':([83,84,],[93,95,]),'else_part':([126,],[135,]),'start_if':([54,74,119,121,139,],[66,66,66,66,66,]),'expr_prefix':([63,82,83,84,101,109,117,129,],[78,78,78,78,78,78,78,78,]),'return_stmt':([54,74,119,121,139,],[62,62,62,62,62,]),'var_type':([5,7,13,19,35,46,52,108,111,132,],[10,10,10,33,41,41,10,10,10,10,]),'str':([26,],[37,]),'param_decl':([35,46,],[40,51,]),'id':([2,6,10,27,31,41,54,74,76,77,89,119,121,139,],[3,15,17,38,39,49,65,65,17,17,100,65,65,65,]),'func_decl':([11,20,],[20,20,]),'while_stmt':([54,74,119,121,139,],[56,56,56,56,56,]),'base_stmt':([54,74,119,121,139,],[68,68,68,68,68,]),'addop':([90,],[106,]),'empty':([5,7,11,13,17,20,35,38,40,51,52,54,63,74,78,82,83,84,101,108,109,111,117,119,121,124,126,129,132,138,139,],[12,12,23,12,28,23,42,28,48,48,12,69,79,69,88,79,79,79,79,12,79,12,122,69,69,131,134,79,12,131,69,]),'any_type':([19,],[31,]),'expr_list_tail':([124,138,],[130,141,]),'start_while':([54,74,119,121,139,],[70,70,70,70,70,]),'read_stmt':([54,74,119,121,139,],[58,58,58,58,58,]),'write_stmt':([54,74,119,121,139,],[72,72,72,72,72,]),'pgm_body':([5,],[14,]),'compop':([94,],[109,]),'id_tail':([17,38,],[29,45,]),'factor':([78,],[90,]),'primary':([89,],[99,]),'func_declarations':([11,20,],[21,34,]),'func_body':([52,],[55,]),'param_decl_tail':([40,51,],[47,53,]),'program':([0,],[1,]),'var_decl':([5,7,13,52,108,111,132,],[13,13,13,13,13,13,13,]),'id_list':([10,76,77,],[18,86,87,]),'start_else':([126,],[132,]),'end_while':([127,],[136,]),'assign_expr':([54,74,119,121,139,],[64,64,64,64,64,]),'postfix_expr':([89,],[98,]),'if_stmt':([54,74,119,121,139,],[67,67,67,67,67,]),'stmt':([54,74,119,121,139,],[74,74,74,74,74,]),'decl':([5,7,13,52,108,111,132,],[11,16,24,54,119,121,139,]),'factor_prefix':([78,],[89,]),'call_expr':([89,],[103,]),'mulop':([98,],[114,]),'stmt_list':([54,74,119,121,139,],[73,85,126,127,142,]),'param_decl_list':([35,],[43,]),'expr':([63,82,83,84,101,109,117,129,],[80,92,94,94,118,120,124,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM id BEGIN pgm_body END','program',5,'p_program','LITTLEGram.py',123),
  ('id -> IDENTIFIER','id',1,'p_id','LITTLEGram.py',126),
  ('pgm_body -> decl func_declarations','pgm_body',2,'p_program_body','LITTLEGram.py',130),
  ('decl -> string_decl decl','decl',2,'p_decl','LITTLEGram.py',133),
  ('decl -> var_decl decl','decl',2,'p_decl','LITTLEGram.py',134),
  ('decl -> empty','decl',1,'p_decl','LITTLEGram.py',135),
  ('string_decl -> STRING id ASSIGN str SEMICOLON','string_decl',5,'p_string_decl','LITTLEGram.py',140),
  ('str -> STRINGLITERAL','str',1,'p_str','LITTLEGram.py',145),
  ('var_decl -> var_type id_list SEMICOLON','var_decl',3,'p_var_decl','LITTLEGram.py',151),
  ('var_type -> FLOAT','var_type',1,'p_var_type','LITTLEGram.py',156),
  ('var_type -> INT','var_type',1,'p_var_type','LITTLEGram.py',157),
  ('any_type -> var_type','any_type',1,'p_any_type','LITTLEGram.py',162),
  ('any_type -> VOID','any_type',1,'p_any_type','LITTLEGram.py',163),
  ('id_list -> id id_tail','id_list',2,'p_id_list','LITTLEGram.py',166),
  ('id_tail -> COMMA id id_tail','id_tail',3,'p_id_tail','LITTLEGram.py',170),
  ('id_tail -> empty','id_tail',1,'p_id_tail','LITTLEGram.py',171),
  ('param_decl_list -> param_decl param_decl_tail','param_decl_list',2,'p_param_decl_list','LITTLEGram.py',180),
  ('param_decl_list -> empty','param_decl_list',1,'p_param_decl_list','LITTLEGram.py',181),
  ('param_decl -> var_type id','param_decl',2,'p_param_decl','LITTLEGram.py',184),
  ('param_decl_tail -> COMMA param_decl param_decl_tail','param_decl_tail',3,'p_param_decl_tail','LITTLEGram.py',188),
  ('param_decl_tail -> empty','param_decl_tail',1,'p_param_decl_tail','LITTLEGram.py',189),
  ('func_declarations -> func_decl func_declarations','func_declarations',2,'p_func_declarations','LITTLEGram.py',194),
  ('func_declarations -> empty','func_declarations',1,'p_func_declarations','LITTLEGram.py',195),
  ('func_decl -> start_of_func LPAREN param_decl_list RPAREN BEGIN func_body END','func_decl',7,'p_func_decl','LITTLEGram.py',198),
  ('start_of_func -> FUNCTION any_type id','start_of_func',3,'p_start_of_func','LITTLEGram.py',202),
  ('func_body -> decl stmt_list','func_body',2,'p_func_body','LITTLEGram.py',206),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','LITTLEGram.py',211),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','LITTLEGram.py',212),
  ('stmt -> base_stmt','stmt',1,'p_stmt','LITTLEGram.py',215),
  ('stmt -> if_stmt','stmt',1,'p_stmt','LITTLEGram.py',216),
  ('stmt -> while_stmt','stmt',1,'p_stmt','LITTLEGram.py',217),
  ('base_stmt -> assign_stmt','base_stmt',1,'p_base_stmt','LITTLEGram.py',220),
  ('base_stmt -> read_stmt','base_stmt',1,'p_base_stmt','LITTLEGram.py',221),
  ('base_stmt -> write_stmt','base_stmt',1,'p_base_stmt','LITTLEGram.py',222),
  ('base_stmt -> return_stmt','base_stmt',1,'p_base_stmt','LITTLEGram.py',223),
  ('assign_stmt -> assign_expr SEMICOLON','assign_stmt',2,'p_assign_stmt','LITTLEGram.py',228),
  ('assign_expr -> id ASSIGN expr','assign_expr',3,'p_assign_expr','LITTLEGram.py',231),
  ('read_stmt -> READ LPAREN id_list RPAREN SEMICOLON','read_stmt',5,'p_read_stmt','LITTLEGram.py',234),
  ('write_stmt -> WRITE LPAREN id_list RPAREN SEMICOLON','write_stmt',5,'p_write_stmt','LITTLEGram.py',237),
  ('return_stmt -> RETURN expr SEMICOLON','return_stmt',3,'p_return_stmt','LITTLEGram.py',240),
  ('expr -> expr_prefix factor','expr',2,'p_expr','LITTLEGram.py',245),
  ('expr_prefix -> expr_prefix factor addop','expr_prefix',3,'p_expr_prefix','LITTLEGram.py',248),
  ('expr_prefix -> empty','expr_prefix',1,'p_expr_prefix','LITTLEGram.py',249),
  ('factor -> factor_prefix postfix_expr','factor',2,'p_factor','LITTLEGram.py',252),
  ('factor_prefix -> factor_prefix postfix_expr mulop','factor_prefix',3,'p_factor_prefix','LITTLEGram.py',255),
  ('factor_prefix -> empty','factor_prefix',1,'p_factor_prefix','LITTLEGram.py',256),
  ('postfix_expr -> primary','postfix_expr',1,'p_postfix_expr','LITTLEGram.py',259),
  ('postfix_expr -> call_expr','postfix_expr',1,'p_postfix_expr','LITTLEGram.py',260),
  ('call_expr -> id LPAREN expr_list RPAREN','call_expr',4,'p_call_expr','LITTLEGram.py',263),
  ('expr_list -> expr expr_list_tail','expr_list',2,'p_expr_list','LITTLEGram.py',266),
  ('expr_list -> empty','expr_list',1,'p_expr_list','LITTLEGram.py',267),
  ('expr_list_tail -> COMMA expr expr_list_tail','expr_list_tail',3,'p_expr_list_tail','LITTLEGram.py',270),
  ('expr_list_tail -> empty','expr_list_tail',1,'p_expr_list_tail','LITTLEGram.py',271),
  ('primary -> LPAREN expr RPAREN','primary',3,'p_primary','LITTLEGram.py',274),
  ('primary -> id','primary',1,'p_primary','LITTLEGram.py',275),
  ('primary -> INTLITERAL','primary',1,'p_primary','LITTLEGram.py',276),
  ('primary -> FLOATLITERAL','primary',1,'p_primary','LITTLEGram.py',277),
  ('addop -> PLUS','addop',1,'p_addop','LITTLEGram.py',280),
  ('addop -> MINUS','addop',1,'p_addop','LITTLEGram.py',281),
  ('mulop -> MULTIPLY','mulop',1,'p_mulop','LITTLEGram.py',284),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','LITTLEGram.py',285),
  ('if_stmt -> start_if LPAREN cond RPAREN decl stmt_list else_part ENDIF','if_stmt',8,'p_if_stmt','LITTLEGram.py',290),
  ('start_if -> IF','start_if',1,'p_start_if','LITTLEGram.py',294),
  ('else_part -> start_else decl stmt_list','else_part',3,'p_else_part','LITTLEGram.py',298),
  ('else_part -> empty','else_part',1,'p_else_part','LITTLEGram.py',299),
  ('start_else -> ELSE','start_else',1,'p_start_else','LITTLEGram.py',304),
  ('cond -> expr compop expr','cond',3,'p_cond','LITTLEGram.py',308),
  ('compop -> COMPOP','compop',1,'p_compop','LITTLEGram.py',311),
  ('while_stmt -> start_while LPAREN cond RPAREN decl stmt_list end_while','while_stmt',7,'p_while_stmt','LITTLEGram.py',316),
  ('start_while -> WHILE','start_while',1,'p_start_while','LITTLEGram.py',319),
  ('end_while -> ENDWHILE','end_while',1,'p_end_while','LITTLEGram.py',323),
  ('empty -> <empty>','empty',0,'p_empty','LITTLEGram.py',327),
]
